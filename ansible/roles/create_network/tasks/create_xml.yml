# Copyright (c) 2017-2018 Intel Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Define XML file name
  set_fact:
    xml_file: "{{ '/tmp/'+network.key+'.xml' }}"

- name: Delete the file, if exists
  file:
    path: "{{ xml_file }}"
    state: absent

- name: Create a new empty file
  file:
    path: "{{ xml_file }}"
    state: touch

- name: Add root "network" node
  blockinfile:
    path: "{{ xml_file }}"
    marker: ""
    content: |
      <network>
      </network>

- name: Add new children nodes to "/network" node
  xml:
    path: "{{ xml_file }}"
    xpath: /network
    add_children:
      - name: "{{ network.key }}"
      - forward:
          mode: nat
      - bridge:
          name: "{{ network.key }}"
          stp: "on"
          delay: "0"
      - ip:
          address: "{{ network.value.host_ip }}"
          netmask: "{{ network.value.netmask }}"
    pretty_print: yes

- name: Add new children nodes to "/network/ip" node
  xml:
    path: "{{ xml_file }}"
    xpath: /network/ip
    add_children:
      - dhcp
    pretty_print: yes

- name: Add new children nodes to "/network/ip/dhcp" node
  xml:
    path: "{{ xml_file }}"
    xpath: /network/ip/dhcp
    add_children:
      - host:
          mac: "{{ item.value[network.key].mac }}"
          ip: "{{ item.value[network.key].ip }}"
    pretty_print: yes
  with_dict:
    - "{{ node_interfaces }}"
  when:
    - item.value[network.key] is defined

- name: Define network IP address in network/prefix format
  set_fact:
    ip_net_prefix: "{{ item.value[network.key].ip }}/{{ item.value[network.key].netmask }}"
  with_dict:
    - "{{ node_interfaces }}"
  when:
    - item.value[network.key] is defined

- name: Define the last usable IP address in the network
  set_fact:
    last_usable_ip: "{{ ip_net_prefix | ipaddr('network/prefix') | ipaddr('last_usable') }}"
  when:
    - ip_net_prefix is defined

- name: Add new children nodes to "/network/ip/dhcp" node
  xml:
    path: "{{ xml_file }}"
    xpath: /network/ip/dhcp
    add_children:
      - range:
          start: "{{ last_usable_ip }}"
          end: "{{ last_usable_ip }}"
    pretty_print: yes
  when:
    - last_usable_ip is defined

- name: Add new children nodes to "/network/forward" node
  xml:
    path: "{{ xml_file }}"
    xpath: /network/forward
    add_children:
      - nat
    pretty_print: yes

- name: Add new children nodes to "/network/forward/nat" node
  xml:
    path: "{{ xml_file }}"
    xpath: /network/forward/nat
    add_children:
      - port:
          start: "1024"
          end: "65535"
    pretty_print: yes

- name: Define the networks
  virt_net:
    command: define
    name: "{{ network.key }}"
    xml: "{{ lookup('file', xml_file) }}"

- name: Set autostart to yes
  virt_net:
    autostart: yes
    name: "{{ network.key }}"

- name: Start the networks
  virt_net:
    command: start
    name: "{{ network.key }}"

- name: Remove XML file
  file:
    path: "{{ xml_file }}"
    state: absent
